// This file was generated by gir (ce03df6) from gir-files (71d73f0)
// DO NOT EDIT

use Bin;
use Container;
use Widget;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct EventBox(Object<ffi::GtkEventBox>): Bin, Container, Widget;

    match fn {
        get_type => || ffi::gtk_event_box_get_type(),
    }
}

impl EventBox {
    pub fn new() -> EventBox {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_event_box_new()).downcast_unchecked()
        }
    }
}

pub trait EventBoxExt {
    fn get_above_child(&self) -> bool;

    fn get_visible_window(&self) -> bool;

    fn set_above_child(&self, above_child: bool);

    fn set_visible_window(&self, visible_window: bool);
}

impl<O: IsA<EventBox>> EventBoxExt for O {
    fn get_above_child(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_event_box_get_above_child(self.to_glib_none().0))
        }
    }

    fn get_visible_window(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_event_box_get_visible_window(self.to_glib_none().0))
        }
    }

    fn set_above_child(&self, above_child: bool) {
        unsafe {
            ffi::gtk_event_box_set_above_child(self.to_glib_none().0, above_child.to_glib());
        }
    }

    fn set_visible_window(&self, visible_window: bool) {
        unsafe {
            ffi::gtk_event_box_set_visible_window(self.to_glib_none().0, visible_window.to_glib());
        }
    }
}
