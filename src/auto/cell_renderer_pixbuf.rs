// This file was generated by gir (ce03df6) from gir-files (71d73f0)
// DO NOT EDIT

use CellRenderer;
use ffi;
use gdk_pixbuf;
use gio;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct CellRendererPixbuf(Object<ffi::GtkCellRendererPixbuf>): CellRenderer;

    match fn {
        get_type => || ffi::gtk_cell_renderer_pixbuf_get_type(),
    }
}

impl CellRendererPixbuf {
    pub fn new() -> CellRendererPixbuf {
        assert_initialized_main_thread!();
        unsafe {
            CellRenderer::from_glib_none(ffi::gtk_cell_renderer_pixbuf_new()).downcast_unchecked()
        }
    }
}

pub trait CellRendererPixbufExt {
    fn get_property_follow_state(&self) -> bool;

    fn set_property_follow_state(&self, follow_state: bool);

    fn get_property_gicon(&self) -> Option<gio::Icon>;

    fn set_property_gicon<P: IsA<gio::Icon> + IsA<glib::object::Object> + glib::value::SetValueOptional>(&self, gicon: Option<&P>);

    fn get_property_icon_name(&self) -> Option<String>;

    fn set_property_icon_name(&self, icon_name: Option<&str>);

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>);

    fn get_property_pixbuf_expander_closed(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn set_property_pixbuf_expander_closed(&self, pixbuf_expander_closed: Option<&gdk_pixbuf::Pixbuf>);

    fn get_property_pixbuf_expander_open(&self) -> Option<gdk_pixbuf::Pixbuf>;

    fn set_property_pixbuf_expander_open(&self, pixbuf_expander_open: Option<&gdk_pixbuf::Pixbuf>);

    fn get_property_stock_detail(&self) -> Option<String>;

    fn set_property_stock_detail(&self, stock_detail: Option<&str>);

    fn get_property_stock_id(&self) -> Option<String>;

    fn set_property_stock_id(&self, stock_id: Option<&str>);

    fn get_property_stock_size(&self) -> u32;

    fn set_property_stock_size(&self, stock_size: u32);
}

impl<O: IsA<CellRendererPixbuf> + IsA<glib::object::Object>> CellRendererPixbufExt for O {
    fn get_property_follow_state(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "follow-state".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_follow_state(&self, follow_state: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "follow-state".to_glib_none().0, Value::from(&follow_state).to_glib_none().0);
        }
    }

    fn get_property_gicon(&self) -> Option<gio::Icon> {
        let mut value = Value::from(None::<&gio::Icon>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gicon".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gicon<P: IsA<gio::Icon> + IsA<glib::object::Object> + glib::value::SetValueOptional>(&self, gicon: Option<&P>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gicon".to_glib_none().0, Value::from(gicon).to_glib_none().0);
        }
    }

    fn get_property_icon_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "icon-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_icon_name(&self, icon_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "icon-name".to_glib_none().0, Value::from(icon_name).to_glib_none().0);
        }
    }

    fn get_property_pixbuf(&self) -> Option<gdk_pixbuf::Pixbuf> {
        let mut value = Value::from(None::<&gdk_pixbuf::Pixbuf>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pixbuf".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_pixbuf(&self, pixbuf: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "pixbuf".to_glib_none().0, Value::from(pixbuf).to_glib_none().0);
        }
    }

    fn get_property_pixbuf_expander_closed(&self) -> Option<gdk_pixbuf::Pixbuf> {
        let mut value = Value::from(None::<&gdk_pixbuf::Pixbuf>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pixbuf-expander-closed".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_pixbuf_expander_closed(&self, pixbuf_expander_closed: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "pixbuf-expander-closed".to_glib_none().0, Value::from(pixbuf_expander_closed).to_glib_none().0);
        }
    }

    fn get_property_pixbuf_expander_open(&self) -> Option<gdk_pixbuf::Pixbuf> {
        let mut value = Value::from(None::<&gdk_pixbuf::Pixbuf>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "pixbuf-expander-open".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_pixbuf_expander_open(&self, pixbuf_expander_open: Option<&gdk_pixbuf::Pixbuf>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "pixbuf-expander-open".to_glib_none().0, Value::from(pixbuf_expander_open).to_glib_none().0);
        }
    }

    fn get_property_stock_detail(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "stock-detail".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_stock_detail(&self, stock_detail: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "stock-detail".to_glib_none().0, Value::from(stock_detail).to_glib_none().0);
        }
    }

    fn get_property_stock_id(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "stock-id".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_stock_id(&self, stock_id: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "stock-id".to_glib_none().0, Value::from(stock_id).to_glib_none().0);
        }
    }

    fn get_property_stock_size(&self) -> u32 {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "stock-size".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_stock_size(&self, stock_size: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "stock-size".to_glib_none().0, Value::from(&stock_size).to_glib_none().0);
        }
    }
}
