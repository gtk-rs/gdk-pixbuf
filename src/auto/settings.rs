// This file was generated by gir (ce03df6) from gir-files (71d73f0)
// DO NOT EDIT

use CornerType;
use IMPreeditStyle;
use IMStatusStyle;
use IconSize;
use PolicyType;
use StyleProvider;
use ToolbarStyle;
use ffi;
use gdk;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use libc;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Settings(Object<ffi::GtkSettings>): StyleProvider;

    match fn {
        get_type => || ffi::gtk_settings_get_type(),
    }
}

impl Settings {
    pub fn get_default() -> Option<Settings> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gtk_settings_get_default())
        }
    }

    pub fn get_for_screen(screen: &gdk::Screen) -> Option<Settings> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gtk_settings_get_for_screen(screen.to_glib_none().0))
        }
    }

    //pub fn install_property<P: IsA</*Ignored*/glib::ParamSpec>>(pspec: &P) {
    //    unsafe { TODO: call ffi::gtk_settings_install_property() }
    //}

    //pub fn install_property_parser<P: IsA</*Ignored*/glib::ParamSpec>>(pspec: &P, parser: /*Unknown conversion*//*Unimplemented*/RcPropertyParser) {
    //    unsafe { TODO: call ffi::gtk_settings_install_property_parser() }
    //}
}

pub trait SettingsExt {
    #[cfg(feature = "v3_20")]
    fn reset_property(&self, name: &str);

    fn set_double_property(&self, name: &str, v_double: f64, origin: &str);

    fn set_long_property(&self, name: &str, v_long: libc::c_long, origin: &str);

    //fn set_property_value(&self, name: &str, svalue: /*Ignored*/&SettingsValue);

    fn set_string_property(&self, name: &str, v_string: &str, origin: &str);

    fn get_property_gtk_alternative_button_order(&self) -> bool;

    fn set_property_gtk_alternative_button_order(&self, gtk_alternative_button_order: bool);

    fn get_property_gtk_alternative_sort_arrows(&self) -> bool;

    fn set_property_gtk_alternative_sort_arrows(&self, gtk_alternative_sort_arrows: bool);

    fn get_property_gtk_application_prefer_dark_theme(&self) -> bool;

    fn set_property_gtk_application_prefer_dark_theme(&self, gtk_application_prefer_dark_theme: bool);

    fn get_property_gtk_auto_mnemonics(&self) -> bool;

    fn set_property_gtk_auto_mnemonics(&self, gtk_auto_mnemonics: bool);

    fn get_property_gtk_button_images(&self) -> bool;

    fn set_property_gtk_button_images(&self, gtk_button_images: bool);

    fn get_property_gtk_can_change_accels(&self) -> bool;

    fn set_property_gtk_can_change_accels(&self, gtk_can_change_accels: bool);

    fn get_property_gtk_color_palette(&self) -> Option<String>;

    fn set_property_gtk_color_palette(&self, gtk_color_palette: Option<&str>);

    fn get_property_gtk_color_scheme(&self) -> Option<String>;

    fn set_property_gtk_color_scheme(&self, gtk_color_scheme: Option<&str>);

    fn get_property_gtk_cursor_blink(&self) -> bool;

    fn set_property_gtk_cursor_blink(&self, gtk_cursor_blink: bool);

    fn get_property_gtk_cursor_blink_time(&self) -> i32;

    fn set_property_gtk_cursor_blink_time(&self, gtk_cursor_blink_time: i32);

    fn get_property_gtk_cursor_blink_timeout(&self) -> i32;

    fn set_property_gtk_cursor_blink_timeout(&self, gtk_cursor_blink_timeout: i32);

    fn get_property_gtk_cursor_theme_name(&self) -> Option<String>;

    fn set_property_gtk_cursor_theme_name(&self, gtk_cursor_theme_name: Option<&str>);

    fn get_property_gtk_cursor_theme_size(&self) -> i32;

    fn set_property_gtk_cursor_theme_size(&self, gtk_cursor_theme_size: i32);

    #[cfg(feature = "v3_12")]
    fn get_property_gtk_decoration_layout(&self) -> Option<String>;

    #[cfg(feature = "v3_12")]
    fn set_property_gtk_decoration_layout(&self, gtk_decoration_layout: Option<&str>);

    #[cfg(feature = "v3_12")]
    fn get_property_gtk_dialogs_use_header(&self) -> bool;

    #[cfg(feature = "v3_12")]
    fn set_property_gtk_dialogs_use_header(&self, gtk_dialogs_use_header: bool);

    fn get_property_gtk_dnd_drag_threshold(&self) -> i32;

    fn set_property_gtk_dnd_drag_threshold(&self, gtk_dnd_drag_threshold: i32);

    fn get_property_gtk_double_click_distance(&self) -> i32;

    fn set_property_gtk_double_click_distance(&self, gtk_double_click_distance: i32);

    fn get_property_gtk_double_click_time(&self) -> i32;

    fn set_property_gtk_double_click_time(&self, gtk_double_click_time: i32);

    fn get_property_gtk_enable_accels(&self) -> bool;

    fn set_property_gtk_enable_accels(&self, gtk_enable_accels: bool);

    fn get_property_gtk_enable_animations(&self) -> bool;

    fn set_property_gtk_enable_animations(&self, gtk_enable_animations: bool);

    fn get_property_gtk_enable_event_sounds(&self) -> bool;

    fn set_property_gtk_enable_event_sounds(&self, gtk_enable_event_sounds: bool);

    fn get_property_gtk_enable_input_feedback_sounds(&self) -> bool;

    fn set_property_gtk_enable_input_feedback_sounds(&self, gtk_enable_input_feedback_sounds: bool);

    fn get_property_gtk_enable_mnemonics(&self) -> bool;

    fn set_property_gtk_enable_mnemonics(&self, gtk_enable_mnemonics: bool);

    fn get_property_gtk_enable_primary_paste(&self) -> bool;

    fn set_property_gtk_enable_primary_paste(&self, gtk_enable_primary_paste: bool);

    fn get_property_gtk_enable_tooltips(&self) -> bool;

    fn set_property_gtk_enable_tooltips(&self, gtk_enable_tooltips: bool);

    fn get_property_gtk_entry_password_hint_timeout(&self) -> u32;

    fn set_property_gtk_entry_password_hint_timeout(&self, gtk_entry_password_hint_timeout: u32);

    fn get_property_gtk_entry_select_on_focus(&self) -> bool;

    fn set_property_gtk_entry_select_on_focus(&self, gtk_entry_select_on_focus: bool);

    fn get_property_gtk_error_bell(&self) -> bool;

    fn set_property_gtk_error_bell(&self, gtk_error_bell: bool);

    fn get_property_gtk_fallback_icon_theme(&self) -> Option<String>;

    fn set_property_gtk_fallback_icon_theme(&self, gtk_fallback_icon_theme: Option<&str>);

    fn get_property_gtk_file_chooser_backend(&self) -> Option<String>;

    fn set_property_gtk_file_chooser_backend(&self, gtk_file_chooser_backend: Option<&str>);

    fn get_property_gtk_font_name(&self) -> Option<String>;

    fn set_property_gtk_font_name(&self, gtk_font_name: Option<&str>);

    fn get_property_gtk_fontconfig_timestamp(&self) -> u32;

    fn set_property_gtk_fontconfig_timestamp(&self, gtk_fontconfig_timestamp: u32);

    fn get_property_gtk_icon_sizes(&self) -> Option<String>;

    fn set_property_gtk_icon_sizes(&self, gtk_icon_sizes: Option<&str>);

    fn get_property_gtk_icon_theme_name(&self) -> Option<String>;

    fn set_property_gtk_icon_theme_name(&self, gtk_icon_theme_name: Option<&str>);

    fn get_property_gtk_im_module(&self) -> Option<String>;

    fn set_property_gtk_im_module(&self, gtk_im_module: Option<&str>);

    fn get_property_gtk_im_preedit_style(&self) -> IMPreeditStyle;

    fn set_property_gtk_im_preedit_style(&self, gtk_im_preedit_style: IMPreeditStyle);

    fn get_property_gtk_im_status_style(&self) -> IMStatusStyle;

    fn set_property_gtk_im_status_style(&self, gtk_im_status_style: IMStatusStyle);

    fn get_property_gtk_key_theme_name(&self) -> Option<String>;

    fn set_property_gtk_key_theme_name(&self, gtk_key_theme_name: Option<&str>);

    fn get_property_gtk_keynav_cursor_only(&self) -> bool;

    fn set_property_gtk_keynav_cursor_only(&self, gtk_keynav_cursor_only: bool);

    #[cfg(feature = "v3_20")]
    fn get_property_gtk_keynav_use_caret(&self) -> bool;

    #[cfg(feature = "v3_20")]
    fn set_property_gtk_keynav_use_caret(&self, gtk_keynav_use_caret: bool);

    fn get_property_gtk_keynav_wrap_around(&self) -> bool;

    fn set_property_gtk_keynav_wrap_around(&self, gtk_keynav_wrap_around: bool);

    fn get_property_gtk_label_select_on_focus(&self) -> bool;

    fn set_property_gtk_label_select_on_focus(&self, gtk_label_select_on_focus: bool);

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_long_press_time(&self) -> u32;

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_long_press_time(&self, gtk_long_press_time: u32);

    fn get_property_gtk_menu_bar_accel(&self) -> Option<String>;

    fn set_property_gtk_menu_bar_accel(&self, gtk_menu_bar_accel: Option<&str>);

    fn get_property_gtk_menu_bar_popup_delay(&self) -> i32;

    fn set_property_gtk_menu_bar_popup_delay(&self, gtk_menu_bar_popup_delay: i32);

    fn get_property_gtk_menu_images(&self) -> bool;

    fn set_property_gtk_menu_images(&self, gtk_menu_images: bool);

    fn get_property_gtk_menu_popdown_delay(&self) -> i32;

    fn set_property_gtk_menu_popdown_delay(&self, gtk_menu_popdown_delay: i32);

    fn get_property_gtk_menu_popup_delay(&self) -> i32;

    fn set_property_gtk_menu_popup_delay(&self, gtk_menu_popup_delay: i32);

    fn get_property_gtk_modules(&self) -> Option<String>;

    fn set_property_gtk_modules(&self, gtk_modules: Option<&str>);

    #[cfg(feature = "v3_6")]
    fn get_property_gtk_primary_button_warps_slider(&self) -> bool;

    #[cfg(feature = "v3_6")]
    fn set_property_gtk_primary_button_warps_slider(&self, gtk_primary_button_warps_slider: bool);

    fn get_property_gtk_print_backends(&self) -> Option<String>;

    fn set_property_gtk_print_backends(&self, gtk_print_backends: Option<&str>);

    fn get_property_gtk_print_preview_command(&self) -> Option<String>;

    fn set_property_gtk_print_preview_command(&self, gtk_print_preview_command: Option<&str>);

    #[cfg(feature = "v3_8")]
    fn get_property_gtk_recent_files_enabled(&self) -> bool;

    #[cfg(feature = "v3_8")]
    fn set_property_gtk_recent_files_enabled(&self, gtk_recent_files_enabled: bool);

    fn get_property_gtk_recent_files_limit(&self) -> i32;

    fn set_property_gtk_recent_files_limit(&self, gtk_recent_files_limit: i32);

    fn get_property_gtk_recent_files_max_age(&self) -> i32;

    fn set_property_gtk_recent_files_max_age(&self, gtk_recent_files_max_age: i32);

    fn get_property_gtk_scrolled_window_placement(&self) -> CornerType;

    fn set_property_gtk_scrolled_window_placement(&self, gtk_scrolled_window_placement: CornerType);

    fn get_property_gtk_shell_shows_app_menu(&self) -> bool;

    fn set_property_gtk_shell_shows_app_menu(&self, gtk_shell_shows_app_menu: bool);

    fn get_property_gtk_shell_shows_desktop(&self) -> bool;

    fn set_property_gtk_shell_shows_desktop(&self, gtk_shell_shows_desktop: bool);

    fn get_property_gtk_shell_shows_menubar(&self) -> bool;

    fn set_property_gtk_shell_shows_menubar(&self, gtk_shell_shows_menubar: bool);

    fn get_property_gtk_show_input_method_menu(&self) -> bool;

    fn set_property_gtk_show_input_method_menu(&self, gtk_show_input_method_menu: bool);

    fn get_property_gtk_show_unicode_menu(&self) -> bool;

    fn set_property_gtk_show_unicode_menu(&self, gtk_show_unicode_menu: bool);

    fn get_property_gtk_sound_theme_name(&self) -> Option<String>;

    fn set_property_gtk_sound_theme_name(&self, gtk_sound_theme_name: Option<&str>);

    fn get_property_gtk_split_cursor(&self) -> bool;

    fn set_property_gtk_split_cursor(&self, gtk_split_cursor: bool);

    fn get_property_gtk_theme_name(&self) -> Option<String>;

    fn set_property_gtk_theme_name(&self, gtk_theme_name: Option<&str>);

    fn get_property_gtk_timeout_expand(&self) -> i32;

    fn set_property_gtk_timeout_expand(&self, gtk_timeout_expand: i32);

    fn get_property_gtk_timeout_initial(&self) -> i32;

    fn set_property_gtk_timeout_initial(&self, gtk_timeout_initial: i32);

    fn get_property_gtk_timeout_repeat(&self) -> i32;

    fn set_property_gtk_timeout_repeat(&self, gtk_timeout_repeat: i32);

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_double_click(&self) -> Option<String>;

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_double_click(&self, gtk_titlebar_double_click: Option<&str>);

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_middle_click(&self) -> Option<String>;

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_middle_click(&self, gtk_titlebar_middle_click: Option<&str>);

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_right_click(&self) -> Option<String>;

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_right_click(&self, gtk_titlebar_right_click: Option<&str>);

    fn get_property_gtk_toolbar_icon_size(&self) -> IconSize;

    fn set_property_gtk_toolbar_icon_size(&self, gtk_toolbar_icon_size: IconSize);

    fn get_property_gtk_toolbar_style(&self) -> ToolbarStyle;

    fn set_property_gtk_toolbar_style(&self, gtk_toolbar_style: ToolbarStyle);

    fn get_property_gtk_tooltip_browse_mode_timeout(&self) -> i32;

    fn set_property_gtk_tooltip_browse_mode_timeout(&self, gtk_tooltip_browse_mode_timeout: i32);

    fn get_property_gtk_tooltip_browse_timeout(&self) -> i32;

    fn set_property_gtk_tooltip_browse_timeout(&self, gtk_tooltip_browse_timeout: i32);

    fn get_property_gtk_tooltip_timeout(&self) -> i32;

    fn set_property_gtk_tooltip_timeout(&self, gtk_tooltip_timeout: i32);

    fn get_property_gtk_visible_focus(&self) -> PolicyType;

    fn set_property_gtk_visible_focus(&self, gtk_visible_focus: PolicyType);

    fn get_property_gtk_xft_antialias(&self) -> i32;

    fn set_property_gtk_xft_antialias(&self, gtk_xft_antialias: i32);

    fn get_property_gtk_xft_dpi(&self) -> i32;

    fn set_property_gtk_xft_dpi(&self, gtk_xft_dpi: i32);

    fn get_property_gtk_xft_hinting(&self) -> i32;

    fn set_property_gtk_xft_hinting(&self, gtk_xft_hinting: i32);

    fn get_property_gtk_xft_hintstyle(&self) -> Option<String>;

    fn set_property_gtk_xft_hintstyle(&self, gtk_xft_hintstyle: Option<&str>);

    fn get_property_gtk_xft_rgba(&self) -> Option<String>;

    fn set_property_gtk_xft_rgba(&self, gtk_xft_rgba: Option<&str>);
}

impl<O: IsA<Settings> + IsA<glib::object::Object>> SettingsExt for O {
    #[cfg(feature = "v3_20")]
    fn reset_property(&self, name: &str) {
        unsafe {
            ffi::gtk_settings_reset_property(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn set_double_property(&self, name: &str, v_double: f64, origin: &str) {
        unsafe {
            ffi::gtk_settings_set_double_property(self.to_glib_none().0, name.to_glib_none().0, v_double, origin.to_glib_none().0);
        }
    }

    fn set_long_property(&self, name: &str, v_long: libc::c_long, origin: &str) {
        unsafe {
            ffi::gtk_settings_set_long_property(self.to_glib_none().0, name.to_glib_none().0, v_long, origin.to_glib_none().0);
        }
    }

    //fn set_property_value(&self, name: &str, svalue: /*Ignored*/&SettingsValue) {
    //    unsafe { TODO: call ffi::gtk_settings_set_property_value() }
    //}

    fn set_string_property(&self, name: &str, v_string: &str, origin: &str) {
        unsafe {
            ffi::gtk_settings_set_string_property(self.to_glib_none().0, name.to_glib_none().0, v_string.to_glib_none().0, origin.to_glib_none().0);
        }
    }

    fn get_property_gtk_alternative_button_order(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-alternative-button-order".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_alternative_button_order(&self, gtk_alternative_button_order: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-alternative-button-order".to_glib_none().0, Value::from(&gtk_alternative_button_order).to_glib_none().0);
        }
    }

    fn get_property_gtk_alternative_sort_arrows(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-alternative-sort-arrows".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_alternative_sort_arrows(&self, gtk_alternative_sort_arrows: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-alternative-sort-arrows".to_glib_none().0, Value::from(&gtk_alternative_sort_arrows).to_glib_none().0);
        }
    }

    fn get_property_gtk_application_prefer_dark_theme(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-application-prefer-dark-theme".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_application_prefer_dark_theme(&self, gtk_application_prefer_dark_theme: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-application-prefer-dark-theme".to_glib_none().0, Value::from(&gtk_application_prefer_dark_theme).to_glib_none().0);
        }
    }

    fn get_property_gtk_auto_mnemonics(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-auto-mnemonics".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_auto_mnemonics(&self, gtk_auto_mnemonics: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-auto-mnemonics".to_glib_none().0, Value::from(&gtk_auto_mnemonics).to_glib_none().0);
        }
    }

    fn get_property_gtk_button_images(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-button-images".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_button_images(&self, gtk_button_images: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-button-images".to_glib_none().0, Value::from(&gtk_button_images).to_glib_none().0);
        }
    }

    fn get_property_gtk_can_change_accels(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-can-change-accels".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_can_change_accels(&self, gtk_can_change_accels: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-can-change-accels".to_glib_none().0, Value::from(&gtk_can_change_accels).to_glib_none().0);
        }
    }

    fn get_property_gtk_color_palette(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-color-palette".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_color_palette(&self, gtk_color_palette: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-color-palette".to_glib_none().0, Value::from(gtk_color_palette).to_glib_none().0);
        }
    }

    fn get_property_gtk_color_scheme(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-color-scheme".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_color_scheme(&self, gtk_color_scheme: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-color-scheme".to_glib_none().0, Value::from(gtk_color_scheme).to_glib_none().0);
        }
    }

    fn get_property_gtk_cursor_blink(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-cursor-blink".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_cursor_blink(&self, gtk_cursor_blink: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-cursor-blink".to_glib_none().0, Value::from(&gtk_cursor_blink).to_glib_none().0);
        }
    }

    fn get_property_gtk_cursor_blink_time(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-cursor-blink-time".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_cursor_blink_time(&self, gtk_cursor_blink_time: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-cursor-blink-time".to_glib_none().0, Value::from(&gtk_cursor_blink_time).to_glib_none().0);
        }
    }

    fn get_property_gtk_cursor_blink_timeout(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-cursor-blink-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_cursor_blink_timeout(&self, gtk_cursor_blink_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-cursor-blink-timeout".to_glib_none().0, Value::from(&gtk_cursor_blink_timeout).to_glib_none().0);
        }
    }

    fn get_property_gtk_cursor_theme_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-cursor-theme-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_cursor_theme_name(&self, gtk_cursor_theme_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-cursor-theme-name".to_glib_none().0, Value::from(gtk_cursor_theme_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_cursor_theme_size(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-cursor-theme-size".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_cursor_theme_size(&self, gtk_cursor_theme_size: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-cursor-theme-size".to_glib_none().0, Value::from(&gtk_cursor_theme_size).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    fn get_property_gtk_decoration_layout(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-decoration-layout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    #[cfg(feature = "v3_12")]
    fn set_property_gtk_decoration_layout(&self, gtk_decoration_layout: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-decoration-layout".to_glib_none().0, Value::from(gtk_decoration_layout).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    fn get_property_gtk_dialogs_use_header(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-dialogs-use-header".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(feature = "v3_12")]
    fn set_property_gtk_dialogs_use_header(&self, gtk_dialogs_use_header: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-dialogs-use-header".to_glib_none().0, Value::from(&gtk_dialogs_use_header).to_glib_none().0);
        }
    }

    fn get_property_gtk_dnd_drag_threshold(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-dnd-drag-threshold".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_dnd_drag_threshold(&self, gtk_dnd_drag_threshold: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-dnd-drag-threshold".to_glib_none().0, Value::from(&gtk_dnd_drag_threshold).to_glib_none().0);
        }
    }

    fn get_property_gtk_double_click_distance(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-double-click-distance".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_double_click_distance(&self, gtk_double_click_distance: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-double-click-distance".to_glib_none().0, Value::from(&gtk_double_click_distance).to_glib_none().0);
        }
    }

    fn get_property_gtk_double_click_time(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-double-click-time".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_double_click_time(&self, gtk_double_click_time: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-double-click-time".to_glib_none().0, Value::from(&gtk_double_click_time).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_accels(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-accels".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_accels(&self, gtk_enable_accels: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-accels".to_glib_none().0, Value::from(&gtk_enable_accels).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_animations(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-animations".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_animations(&self, gtk_enable_animations: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-animations".to_glib_none().0, Value::from(&gtk_enable_animations).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_event_sounds(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-event-sounds".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_event_sounds(&self, gtk_enable_event_sounds: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-event-sounds".to_glib_none().0, Value::from(&gtk_enable_event_sounds).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_input_feedback_sounds(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-input-feedback-sounds".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_input_feedback_sounds(&self, gtk_enable_input_feedback_sounds: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-input-feedback-sounds".to_glib_none().0, Value::from(&gtk_enable_input_feedback_sounds).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_mnemonics(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-mnemonics".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_mnemonics(&self, gtk_enable_mnemonics: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-mnemonics".to_glib_none().0, Value::from(&gtk_enable_mnemonics).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_primary_paste(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-primary-paste".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_primary_paste(&self, gtk_enable_primary_paste: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-primary-paste".to_glib_none().0, Value::from(&gtk_enable_primary_paste).to_glib_none().0);
        }
    }

    fn get_property_gtk_enable_tooltips(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-enable-tooltips".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_enable_tooltips(&self, gtk_enable_tooltips: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-enable-tooltips".to_glib_none().0, Value::from(&gtk_enable_tooltips).to_glib_none().0);
        }
    }

    fn get_property_gtk_entry_password_hint_timeout(&self) -> u32 {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-entry-password-hint-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_entry_password_hint_timeout(&self, gtk_entry_password_hint_timeout: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-entry-password-hint-timeout".to_glib_none().0, Value::from(&gtk_entry_password_hint_timeout).to_glib_none().0);
        }
    }

    fn get_property_gtk_entry_select_on_focus(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-entry-select-on-focus".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_entry_select_on_focus(&self, gtk_entry_select_on_focus: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-entry-select-on-focus".to_glib_none().0, Value::from(&gtk_entry_select_on_focus).to_glib_none().0);
        }
    }

    fn get_property_gtk_error_bell(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-error-bell".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_error_bell(&self, gtk_error_bell: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-error-bell".to_glib_none().0, Value::from(&gtk_error_bell).to_glib_none().0);
        }
    }

    fn get_property_gtk_fallback_icon_theme(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-fallback-icon-theme".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_fallback_icon_theme(&self, gtk_fallback_icon_theme: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-fallback-icon-theme".to_glib_none().0, Value::from(gtk_fallback_icon_theme).to_glib_none().0);
        }
    }

    fn get_property_gtk_file_chooser_backend(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-file-chooser-backend".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_file_chooser_backend(&self, gtk_file_chooser_backend: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-file-chooser-backend".to_glib_none().0, Value::from(gtk_file_chooser_backend).to_glib_none().0);
        }
    }

    fn get_property_gtk_font_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-font-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_font_name(&self, gtk_font_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-font-name".to_glib_none().0, Value::from(gtk_font_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_fontconfig_timestamp(&self) -> u32 {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-fontconfig-timestamp".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_fontconfig_timestamp(&self, gtk_fontconfig_timestamp: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-fontconfig-timestamp".to_glib_none().0, Value::from(&gtk_fontconfig_timestamp).to_glib_none().0);
        }
    }

    fn get_property_gtk_icon_sizes(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-icon-sizes".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_icon_sizes(&self, gtk_icon_sizes: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-icon-sizes".to_glib_none().0, Value::from(gtk_icon_sizes).to_glib_none().0);
        }
    }

    fn get_property_gtk_icon_theme_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-icon-theme-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_icon_theme_name(&self, gtk_icon_theme_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-icon-theme-name".to_glib_none().0, Value::from(gtk_icon_theme_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_im_module(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-im-module".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_im_module(&self, gtk_im_module: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-im-module".to_glib_none().0, Value::from(gtk_im_module).to_glib_none().0);
        }
    }

    fn get_property_gtk_im_preedit_style(&self) -> IMPreeditStyle {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-im-preedit-style".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_im_preedit_style(&self, gtk_im_preedit_style: IMPreeditStyle) {
        let gtk_im_preedit_style = gtk_im_preedit_style.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-im-preedit-style".to_glib_none().0, Value::from(&gtk_im_preedit_style).to_glib_none().0);
        }
    }

    fn get_property_gtk_im_status_style(&self) -> IMStatusStyle {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-im-status-style".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_im_status_style(&self, gtk_im_status_style: IMStatusStyle) {
        let gtk_im_status_style = gtk_im_status_style.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-im-status-style".to_glib_none().0, Value::from(&gtk_im_status_style).to_glib_none().0);
        }
    }

    fn get_property_gtk_key_theme_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-key-theme-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_key_theme_name(&self, gtk_key_theme_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-key-theme-name".to_glib_none().0, Value::from(gtk_key_theme_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_keynav_cursor_only(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-keynav-cursor-only".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_keynav_cursor_only(&self, gtk_keynav_cursor_only: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-keynav-cursor-only".to_glib_none().0, Value::from(&gtk_keynav_cursor_only).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_20")]
    fn get_property_gtk_keynav_use_caret(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-keynav-use-caret".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(feature = "v3_20")]
    fn set_property_gtk_keynav_use_caret(&self, gtk_keynav_use_caret: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-keynav-use-caret".to_glib_none().0, Value::from(&gtk_keynav_use_caret).to_glib_none().0);
        }
    }

    fn get_property_gtk_keynav_wrap_around(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-keynav-wrap-around".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_keynav_wrap_around(&self, gtk_keynav_wrap_around: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-keynav-wrap-around".to_glib_none().0, Value::from(&gtk_keynav_wrap_around).to_glib_none().0);
        }
    }

    fn get_property_gtk_label_select_on_focus(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-label-select-on-focus".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_label_select_on_focus(&self, gtk_label_select_on_focus: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-label-select-on-focus".to_glib_none().0, Value::from(&gtk_label_select_on_focus).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_long_press_time(&self) -> u32 {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-long-press-time".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_long_press_time(&self, gtk_long_press_time: u32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-long-press-time".to_glib_none().0, Value::from(&gtk_long_press_time).to_glib_none().0);
        }
    }

    fn get_property_gtk_menu_bar_accel(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-menu-bar-accel".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_menu_bar_accel(&self, gtk_menu_bar_accel: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-menu-bar-accel".to_glib_none().0, Value::from(gtk_menu_bar_accel).to_glib_none().0);
        }
    }

    fn get_property_gtk_menu_bar_popup_delay(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-menu-bar-popup-delay".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_menu_bar_popup_delay(&self, gtk_menu_bar_popup_delay: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-menu-bar-popup-delay".to_glib_none().0, Value::from(&gtk_menu_bar_popup_delay).to_glib_none().0);
        }
    }

    fn get_property_gtk_menu_images(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-menu-images".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_menu_images(&self, gtk_menu_images: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-menu-images".to_glib_none().0, Value::from(&gtk_menu_images).to_glib_none().0);
        }
    }

    fn get_property_gtk_menu_popdown_delay(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-menu-popdown-delay".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_menu_popdown_delay(&self, gtk_menu_popdown_delay: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-menu-popdown-delay".to_glib_none().0, Value::from(&gtk_menu_popdown_delay).to_glib_none().0);
        }
    }

    fn get_property_gtk_menu_popup_delay(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-menu-popup-delay".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_menu_popup_delay(&self, gtk_menu_popup_delay: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-menu-popup-delay".to_glib_none().0, Value::from(&gtk_menu_popup_delay).to_glib_none().0);
        }
    }

    fn get_property_gtk_modules(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-modules".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_modules(&self, gtk_modules: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-modules".to_glib_none().0, Value::from(gtk_modules).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_6")]
    fn get_property_gtk_primary_button_warps_slider(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-primary-button-warps-slider".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(feature = "v3_6")]
    fn set_property_gtk_primary_button_warps_slider(&self, gtk_primary_button_warps_slider: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-primary-button-warps-slider".to_glib_none().0, Value::from(&gtk_primary_button_warps_slider).to_glib_none().0);
        }
    }

    fn get_property_gtk_print_backends(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-print-backends".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_print_backends(&self, gtk_print_backends: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-print-backends".to_glib_none().0, Value::from(gtk_print_backends).to_glib_none().0);
        }
    }

    fn get_property_gtk_print_preview_command(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-print-preview-command".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_print_preview_command(&self, gtk_print_preview_command: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-print-preview-command".to_glib_none().0, Value::from(gtk_print_preview_command).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_8")]
    fn get_property_gtk_recent_files_enabled(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-recent-files-enabled".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    #[cfg(feature = "v3_8")]
    fn set_property_gtk_recent_files_enabled(&self, gtk_recent_files_enabled: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-recent-files-enabled".to_glib_none().0, Value::from(&gtk_recent_files_enabled).to_glib_none().0);
        }
    }

    fn get_property_gtk_recent_files_limit(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-recent-files-limit".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_recent_files_limit(&self, gtk_recent_files_limit: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-recent-files-limit".to_glib_none().0, Value::from(&gtk_recent_files_limit).to_glib_none().0);
        }
    }

    fn get_property_gtk_recent_files_max_age(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-recent-files-max-age".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_recent_files_max_age(&self, gtk_recent_files_max_age: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-recent-files-max-age".to_glib_none().0, Value::from(&gtk_recent_files_max_age).to_glib_none().0);
        }
    }

    fn get_property_gtk_scrolled_window_placement(&self) -> CornerType {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-scrolled-window-placement".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_scrolled_window_placement(&self, gtk_scrolled_window_placement: CornerType) {
        let gtk_scrolled_window_placement = gtk_scrolled_window_placement.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-scrolled-window-placement".to_glib_none().0, Value::from(&gtk_scrolled_window_placement).to_glib_none().0);
        }
    }

    fn get_property_gtk_shell_shows_app_menu(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-shell-shows-app-menu".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_shell_shows_app_menu(&self, gtk_shell_shows_app_menu: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-shell-shows-app-menu".to_glib_none().0, Value::from(&gtk_shell_shows_app_menu).to_glib_none().0);
        }
    }

    fn get_property_gtk_shell_shows_desktop(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-shell-shows-desktop".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_shell_shows_desktop(&self, gtk_shell_shows_desktop: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-shell-shows-desktop".to_glib_none().0, Value::from(&gtk_shell_shows_desktop).to_glib_none().0);
        }
    }

    fn get_property_gtk_shell_shows_menubar(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-shell-shows-menubar".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_shell_shows_menubar(&self, gtk_shell_shows_menubar: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-shell-shows-menubar".to_glib_none().0, Value::from(&gtk_shell_shows_menubar).to_glib_none().0);
        }
    }

    fn get_property_gtk_show_input_method_menu(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-show-input-method-menu".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_show_input_method_menu(&self, gtk_show_input_method_menu: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-show-input-method-menu".to_glib_none().0, Value::from(&gtk_show_input_method_menu).to_glib_none().0);
        }
    }

    fn get_property_gtk_show_unicode_menu(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-show-unicode-menu".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_show_unicode_menu(&self, gtk_show_unicode_menu: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-show-unicode-menu".to_glib_none().0, Value::from(&gtk_show_unicode_menu).to_glib_none().0);
        }
    }

    fn get_property_gtk_sound_theme_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-sound-theme-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_sound_theme_name(&self, gtk_sound_theme_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-sound-theme-name".to_glib_none().0, Value::from(gtk_sound_theme_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_split_cursor(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-split-cursor".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_split_cursor(&self, gtk_split_cursor: bool) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-split-cursor".to_glib_none().0, Value::from(&gtk_split_cursor).to_glib_none().0);
        }
    }

    fn get_property_gtk_theme_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-theme-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_theme_name(&self, gtk_theme_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-theme-name".to_glib_none().0, Value::from(gtk_theme_name).to_glib_none().0);
        }
    }

    fn get_property_gtk_timeout_expand(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-timeout-expand".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_timeout_expand(&self, gtk_timeout_expand: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-timeout-expand".to_glib_none().0, Value::from(&gtk_timeout_expand).to_glib_none().0);
        }
    }

    fn get_property_gtk_timeout_initial(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-timeout-initial".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_timeout_initial(&self, gtk_timeout_initial: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-timeout-initial".to_glib_none().0, Value::from(&gtk_timeout_initial).to_glib_none().0);
        }
    }

    fn get_property_gtk_timeout_repeat(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-timeout-repeat".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_timeout_repeat(&self, gtk_timeout_repeat: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-timeout-repeat".to_glib_none().0, Value::from(&gtk_timeout_repeat).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_double_click(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-titlebar-double-click".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_double_click(&self, gtk_titlebar_double_click: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-titlebar-double-click".to_glib_none().0, Value::from(gtk_titlebar_double_click).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_middle_click(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-titlebar-middle-click".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_middle_click(&self, gtk_titlebar_middle_click: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-titlebar-middle-click".to_glib_none().0, Value::from(gtk_titlebar_middle_click).to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_property_gtk_titlebar_right_click(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-titlebar-right-click".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    #[cfg(feature = "v3_14")]
    fn set_property_gtk_titlebar_right_click(&self, gtk_titlebar_right_click: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-titlebar-right-click".to_glib_none().0, Value::from(gtk_titlebar_right_click).to_glib_none().0);
        }
    }

    fn get_property_gtk_toolbar_icon_size(&self) -> IconSize {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-toolbar-icon-size".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_toolbar_icon_size(&self, gtk_toolbar_icon_size: IconSize) {
        let gtk_toolbar_icon_size = gtk_toolbar_icon_size.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-toolbar-icon-size".to_glib_none().0, Value::from(&gtk_toolbar_icon_size).to_glib_none().0);
        }
    }

    fn get_property_gtk_toolbar_style(&self) -> ToolbarStyle {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-toolbar-style".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_toolbar_style(&self, gtk_toolbar_style: ToolbarStyle) {
        let gtk_toolbar_style = gtk_toolbar_style.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-toolbar-style".to_glib_none().0, Value::from(&gtk_toolbar_style).to_glib_none().0);
        }
    }

    fn get_property_gtk_tooltip_browse_mode_timeout(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-tooltip-browse-mode-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_tooltip_browse_mode_timeout(&self, gtk_tooltip_browse_mode_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-tooltip-browse-mode-timeout".to_glib_none().0, Value::from(&gtk_tooltip_browse_mode_timeout).to_glib_none().0);
        }
    }

    fn get_property_gtk_tooltip_browse_timeout(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-tooltip-browse-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_tooltip_browse_timeout(&self, gtk_tooltip_browse_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-tooltip-browse-timeout".to_glib_none().0, Value::from(&gtk_tooltip_browse_timeout).to_glib_none().0);
        }
    }

    fn get_property_gtk_tooltip_timeout(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-tooltip-timeout".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_tooltip_timeout(&self, gtk_tooltip_timeout: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-tooltip-timeout".to_glib_none().0, Value::from(&gtk_tooltip_timeout).to_glib_none().0);
        }
    }

    fn get_property_gtk_visible_focus(&self) -> PolicyType {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-visible-focus".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn set_property_gtk_visible_focus(&self, gtk_visible_focus: PolicyType) {
        let gtk_visible_focus = gtk_visible_focus.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-visible-focus".to_glib_none().0, Value::from(&gtk_visible_focus).to_glib_none().0);
        }
    }

    fn get_property_gtk_xft_antialias(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-xft-antialias".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_xft_antialias(&self, gtk_xft_antialias: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-xft-antialias".to_glib_none().0, Value::from(&gtk_xft_antialias).to_glib_none().0);
        }
    }

    fn get_property_gtk_xft_dpi(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-xft-dpi".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_xft_dpi(&self, gtk_xft_dpi: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-xft-dpi".to_glib_none().0, Value::from(&gtk_xft_dpi).to_glib_none().0);
        }
    }

    fn get_property_gtk_xft_hinting(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-xft-hinting".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_gtk_xft_hinting(&self, gtk_xft_hinting: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-xft-hinting".to_glib_none().0, Value::from(&gtk_xft_hinting).to_glib_none().0);
        }
    }

    fn get_property_gtk_xft_hintstyle(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-xft-hintstyle".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_xft_hintstyle(&self, gtk_xft_hintstyle: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-xft-hintstyle".to_glib_none().0, Value::from(gtk_xft_hintstyle).to_glib_none().0);
        }
    }

    fn get_property_gtk_xft_rgba(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "gtk-xft-rgba".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_gtk_xft_rgba(&self, gtk_xft_rgba: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "gtk-xft-rgba".to_glib_none().0, Value::from(gtk_xft_rgba).to_glib_none().0);
        }
    }
}
