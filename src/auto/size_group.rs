// This file was generated by gir (ce03df6) from gir-files (71d73f0)
// DO NOT EDIT

use SizeGroupMode;
use Widget;
use ffi;
use glib::object::IsA;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::mem;
use std::ptr;

glib_wrapper! {
    pub struct SizeGroup(Object<ffi::GtkSizeGroup>);

    match fn {
        get_type => || ffi::gtk_size_group_get_type(),
    }
}

impl SizeGroup {
    pub fn new(mode: SizeGroupMode) -> SizeGroup {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_size_group_new(mode.to_glib()))
        }
    }
}

pub trait SizeGroupExt {
    fn add_widget<P: IsA<Widget>>(&self, widget: &P);

    fn get_ignore_hidden(&self) -> bool;

    fn get_mode(&self) -> SizeGroupMode;

    fn get_widgets(&self) -> Vec<Widget>;

    fn remove_widget<P: IsA<Widget>>(&self, widget: &P);

    fn set_ignore_hidden(&self, ignore_hidden: bool);

    fn set_mode(&self, mode: SizeGroupMode);
}

impl<O: IsA<SizeGroup>> SizeGroupExt for O {
    fn add_widget<P: IsA<Widget>>(&self, widget: &P) {
        unsafe {
            ffi::gtk_size_group_add_widget(self.to_glib_none().0, widget.to_glib_none().0);
        }
    }

    fn get_ignore_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_size_group_get_ignore_hidden(self.to_glib_none().0))
        }
    }

    fn get_mode(&self) -> SizeGroupMode {
        unsafe {
            from_glib(ffi::gtk_size_group_get_mode(self.to_glib_none().0))
        }
    }

    fn get_widgets(&self) -> Vec<Widget> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gtk_size_group_get_widgets(self.to_glib_none().0))
        }
    }

    fn remove_widget<P: IsA<Widget>>(&self, widget: &P) {
        unsafe {
            ffi::gtk_size_group_remove_widget(self.to_glib_none().0, widget.to_glib_none().0);
        }
    }

    fn set_ignore_hidden(&self, ignore_hidden: bool) {
        unsafe {
            ffi::gtk_size_group_set_ignore_hidden(self.to_glib_none().0, ignore_hidden.to_glib());
        }
    }

    fn set_mode(&self, mode: SizeGroupMode) {
        unsafe {
            ffi::gtk_size_group_set_mode(self.to_glib_none().0, mode.to_glib());
        }
    }
}
